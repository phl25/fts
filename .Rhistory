instrument <- "SAP.csv"
BuyHoldDirectory <- InstrumentDirectory
BuyHoldInstrument <- instrument
currency("EUR")
Sys.setenv(TZ="UTC")
initdate <- '1999-12-31'
startdate <- '2000-01-01'
enddate <- '2018-12-31'
portfolioname <- "Smash Day"
accountname <- portfolioname
# Clear portfolio and Account
suppressWarnings(rm("account.Smash Day","portfolio.Smash Day","account.buyhold","portfolio.buyhold",pos=.blotter))
# Initialize Portfolio and Account
initPortf(portfolioname,instrument,initDate=initdate,currency="EUR")
initAcct(accountname,portfolios=portfolioname,initDate=initdate,initEq=startCapital,currency="EUR")
# Bar-by-bar processing ---------------------------------------------------
LoadCourseFile(InstrumentDirectory, instrument, debugme = TRUE, dates = daterange)
# Initialize the instrument
stock(instrument, currency = "EUR")
# Load the XTS file
symbol <- get(instrument)
# Calculate the Exponential Moving Average
ema <- EMA(symbol$Close, n=emaPeriod)
# Merge the xts file with the Exponential Moving Average
symbol <- merge(symbol,ema)
# Bar by bar for all bars from one after the ema-period
for (i in (emaPeriod+1):(nrow(symbol)-1)) {
# Dates
CurrentDate <- time(symbol[i])
TomorrowDate <- time(symbol[i+1])
# Today's variables
CloseToday <- as.numeric(symbol[i,"Close"])
EMA_today <- as.numeric(symbol[i,"EMA"])
LowToday <- as.numeric(symbol[i, "Low"])
HighToday <- as.numeric(symbol[i, "High"])
# Yesterday's variables
LowYesterday <- as.numeric(symbol[i-1, "Low"])
HighYesterday <- as.numeric(symbol[i-1, "High"])
# Tomorrow's variables
OpenTomorrow <- as.numeric(symbol[i+1, "Open"])
LowTomorrow <- as.numeric(symbol[i+1, "Low"])
HighTomorrow <- as.numeric(symbol[i+1, "High"])
# Config
Equity <- getEndEq(accountname, CurrentDate)
Position <- getPosQty(portfolioname, Symbol = instrument, Date = CurrentDate)
# Log
print(sprintf("%s - Equity: %s", CurrentDate, Equity))
# Check whether we have a position
if (Position == 0) {
# Start checking BUY rules
# Check whether we have a Smash Day (Long).
# Smash Day (Long) is when Todays Close is below Yesterdays Low.
if (CloseToday < LowYesterday) {
#Check whether todays close is above today's EMA
if (CloseToday > EMA_today) {
# BUY RULE: If today was a smash day place a STOP BUY order at todays high price. (Buy tomorrow for 'price >= todays high')
# Simulate STOP BUY order:
# Option 1 to check: Check whether the open price tomorrow is above today's high and add the transaction tomorrow at tomorrows open price.
# Option 2 to check: Check whether today's high was lower than tomorrows high and add the transaction tomorrow at today's high price.
# Check Option 1
if (OpenTomorrow > HighToday) {
# Don't trade at the day before the last day
if(CurrentDate != time(symbol[nrow(symbol)-1])){
# Calculate the buy quantity
BuyQuantity <- as.numeric(trunc(Equity/OpenTomorrow))
# Add transaction
addTxn(portfolioname, Symbol=instrument, TxnDate = TomorrowDate , TxnPrice=OpenTomorrow, TxnQty = BuyQuantity, TxnFees = transactionCost)
# Store the bar at which we placed the transaction
BuyBar <- i
}
} else {
# Check Option 2
if (HighToday < HighTomorrow) {
# Don't trade at the day before the last day
if(CurrentDate != time(symbol[nrow(symbol)-1])){
# Calculate the buy quantity
BuyQuantity <- as.numeric(trunc(Equity/HighToday))
# Add transaction
addTxn(portfolioname, Symbol=instrument, TxnDate = TomorrowDate , TxnPrice=HighToday, TxnQty = BuyQuantity, TxnFees = transactionCost)
# Store the bar at which we placed the transaction
BuyBar <- i
}
}
}
}
}
} else {
# We already have a position
# Check the sell rules in the following order and sell at the first condition which is satisfied.
# Sell rules:
# Rule 1: Sell if we hold the position longer than the specified maximum holding period
# Rule 2: Sell at tomorrow's opening price if the close price today falls below the EMA
# Rule 3: Sell if we meet the Smash Day (Short) requirements. Today's close must be higher than yesterday's high
# Rule 4: If no sell rule can be applied and we reach the second last day. Sell at the last day.
# Check Rule 1:
if  ((i - BuyBar) > maxHoldingPeriod) {
# Place the sell transaction at todays close price
addTxn(portfolioname, Symbol=instrument, TxnDate = CurrentDate, TxnPrice=as.numeric(symbol[i, "Close"]), TxnQty = -Position, TxnFees = transactionCost)
} else {
# Check Rule 2:
if (as.numeric(symbol[i,"Close"]) < EMA_today) {
# Place the sell transaction at tomorrow's open price
addTxn(portfolioname, Symbol=instrument, TxnDate = time(symbol[i+1]), TxnPrice=OpenTomorrow, TxnQty = -Position, TxnFees = transactionCost)
} else {
# Check Rule 3:
# Sell Rule 3: If today was a smash day (short) place an order at todays low price. (Buy tomorrow for 'price <= todays low')
# Simulate this behaviour:
# Option 1 to check: Check whether the open price tomorrow is below today's low and add the transaction tomorrow at tomorrows open price.
# Option 2 to check: Check whether today's low was larger than tomorrow's low and add the transaction tomorrow at today's low price.
# Check for Smash Day (Short)
if (CloseToday > HighYesterday) {
# Check for Option 1
if (OpenTomorrow < LowToday) {
# Add Sell transaction tomorrow at tomorrow's open price
addTxn(portfolioname, Symbol=instrument, TxnDate = time(symbol[i+1]), TxnPrice=OpenTomorrow, TxnQty = -Position, TxnFees = transactionCost)
} else {
# Check for Option 2
if (LowToday > LowTomorrow ) {
# Add Sell transaction tomorrow at today's low price
addTxn(portfolioname, Symbol=instrument, TxnDate = time(symbol[i+1]), TxnPrice=LowToday, TxnQty = -Position, TxnFees = transactionCost)
}
}
} else {
# Check Rule 4
if (i==nrow(symbol)-1) {
# Add Sell transaction for the last day at the close price
addTxn(portfolioname,Symbol=instrument, TxnDate = time(symbol[i+1]), TxnPrice=as.numeric(symbol[i, "Close"]), TxnQty = -Position, TxnFees = transactionCost)
}
}
}
}
}
updatePortf(portfolioname,Symbols=instrument,Dates=CurrentDate)
updateAcct(accountname,Dates=CurrentDate)
updateEndEq(accountname,CurrentDate)
} # End Bar-by-bar processing
myTheme <- chart_theme()
myTheme$col$up.col <- 'lightblue'
myTheme$col$dn.col <- 'brown'
myTheme$col$dn.border <- 'lightgray'
myTheme$col$up.border <- 'lightgray'
par(mfrow=c(1,1))
addEMAString <- paste("add_EMA(n=",emaPeriod,")",sep = "")
chart.Posn(portfolioname,Symbol=instrument,type='candlesticks', theme=myTheme,subset=daterange,TA=addEMAString)
chart.Posn(portfolioname,Symbol=instrument,type='candlesticks', theme=myTheme,subset="2005-09::2006-08",TA=addEMAString)
#### Smash Day Pattern WITH SELL ON SMASH DAY and sell when price falls below EMA200 and sell after maxholding period
# Clear Environment -------------------------------------------------------
rm(list=ls())
# Initialization ----------------------------------------------------------
library(blotter)
library(INFT361Course)
# Variables ---------------------------------------------------------------
# Set values:
startCapital <- 1e+6
transactionCost <- -20
daterange <- '2005::2007'
emaPeriod <- 200
maxHoldingPeriod <- 30
InstrumentDirectory <- "~/Desktop/R/DownloadedData/"
instrument <- "SAP.csv"
BuyHoldDirectory <- InstrumentDirectory
BuyHoldInstrument <- instrument
currency("EUR")
Sys.setenv(TZ="UTC")
initdate <- '1999-12-31'
startdate <- '2000-01-01'
enddate <- '2018-12-31'
portfolioname <- "Smash Day"
accountname <- portfolioname
# Clear portfolio and Account
suppressWarnings(rm("account.Smash Day","portfolio.Smash Day","account.buyhold","portfolio.buyhold",pos=.blotter))
# Initialize Portfolio and Account
initPortf(portfolioname,instrument,initDate=initdate,currency="EUR")
initAcct(accountname,portfolios=portfolioname,initDate=initdate,initEq=startCapital,currency="EUR")
# Bar-by-bar processing ---------------------------------------------------
LoadCourseFile(InstrumentDirectory, instrument, debugme = TRUE, dates = daterange)
# Initialize the instrument
stock(instrument, currency = "EUR")
# Load the XTS file
symbol <- get(instrument)
# Calculate the Exponential Moving Average
ema <- EMA(symbol$Close, n=emaPeriod)
# Merge the xts file with the Exponential Moving Average
symbol <- merge(symbol,ema)
# Bar by bar for all bars from one after the ema-period
for (i in (emaPeriod+1):(nrow(symbol)-1)) {
# Dates
CurrentDate <- time(symbol[i])
TomorrowDate <- time(symbol[i+1])
# Today's variables
CloseToday <- as.numeric(symbol[i,"Close"])
EMA_today <- as.numeric(symbol[i,"EMA"])
LowToday <- as.numeric(symbol[i, "Low"])
HighToday <- as.numeric(symbol[i, "High"])
OpenToday <- as.numeric(symbol[i, "Open"])
# Yesterday's variables
LowYesterday <- as.numeric(symbol[i-1, "Low"])
HighYesterday <- as.numeric(symbol[i-1, "High"])
# Tomorrow's variables
OpenTomorrow <- as.numeric(symbol[i+1, "Open"])
LowTomorrow <- as.numeric(symbol[i+1, "Low"])
HighTomorrow <- as.numeric(symbol[i+1, "High"])
# Config
Equity <- getEndEq(accountname, CurrentDate)
Position <- getPosQty(portfolioname, Symbol = instrument, Date = CurrentDate)
# Log
print(sprintf("%s - Equity: %s", CurrentDate, Equity))
# Check whether we have a position
if (Position == 0) {
# Start checking BUY rules
# Check whether we have a Smash Day (Long).
# Smash Day (Long) is when Todays Close is below Yesterdays Low.
if ((CloseToday < LowYesterday) & (OpenToday>CloseToday)) {
#Check whether todays close is above today's EMA
if (CloseToday > EMA_today) {
# BUY RULE: If today was a smash day place a STOP BUY order at todays high price. (Buy tomorrow for 'price >= todays high')
# Simulate STOP BUY order:
# Option 1 to check: Check whether the open price tomorrow is above today's high and add the transaction tomorrow at tomorrows open price.
# Option 2 to check: Check whether today's high was lower than tomorrows high and add the transaction tomorrow at today's high price.
# Check Option 1
if (OpenTomorrow > HighToday) {
# Don't trade at the day before the last day
if(CurrentDate != time(symbol[nrow(symbol)-1])){
# Calculate the buy quantity
BuyQuantity <- as.numeric(trunc(Equity/OpenTomorrow))
# Add transaction
addTxn(portfolioname, Symbol=instrument, TxnDate = TomorrowDate , TxnPrice=OpenTomorrow, TxnQty = BuyQuantity, TxnFees = transactionCost)
# Store the bar at which we placed the transaction
BuyBar <- i
}
} else {
# Check Option 2
if (HighToday < HighTomorrow) {
# Don't trade at the day before the last day
if(CurrentDate != time(symbol[nrow(symbol)-1])){
# Calculate the buy quantity
BuyQuantity <- as.numeric(trunc(Equity/HighToday))
# Add transaction
addTxn(portfolioname, Symbol=instrument, TxnDate = TomorrowDate , TxnPrice=HighToday, TxnQty = BuyQuantity, TxnFees = transactionCost)
# Store the bar at which we placed the transaction
BuyBar <- i
}
}
}
}
}
} else {
# We already have a position
# Check the sell rules in the following order and sell at the first condition which is satisfied.
# Sell rules:
# Rule 1: Sell if we hold the position longer than the specified maximum holding period
# Rule 2: Sell at tomorrow's opening price if the close price today falls below the EMA
# Rule 3: Sell if we meet the Smash Day (Short) requirements. Today's close must be higher than yesterday's high
# Rule 4: If no sell rule can be applied and we reach the second last day. Sell at the last day.
# Check Rule 1:
if  ((i - BuyBar) > maxHoldingPeriod) {
# Place the sell transaction at todays close price
addTxn(portfolioname, Symbol=instrument, TxnDate = CurrentDate, TxnPrice=as.numeric(symbol[i, "Close"]), TxnQty = -Position, TxnFees = transactionCost)
} else {
# Check Rule 2:
if (as.numeric(symbol[i,"Close"]) < EMA_today) {
# Place the sell transaction at tomorrow's open price
addTxn(portfolioname, Symbol=instrument, TxnDate = time(symbol[i+1]), TxnPrice=OpenTomorrow, TxnQty = -Position, TxnFees = transactionCost)
} else {
# Check Rule 3:
# Sell Rule 3: If today was a smash day (short) place an order at todays low price. (Buy tomorrow for 'price <= todays low')
# Simulate this behaviour:
# Option 1 to check: Check whether the open price tomorrow is below today's low and add the transaction tomorrow at tomorrows open price.
# Option 2 to check: Check whether today's low was larger than tomorrow's low and add the transaction tomorrow at today's low price.
# Check for Smash Day (Short)
if ((CloseToday > HighYesterday)&(OpenToday<CloseToday)) {
# Check for Option 1
if (OpenTomorrow < LowToday) {
# Add Sell transaction tomorrow at tomorrow's open price
addTxn(portfolioname, Symbol=instrument, TxnDate = time(symbol[i+1]), TxnPrice=OpenTomorrow, TxnQty = -Position, TxnFees = transactionCost)
} else {
# Check for Option 2
if (LowToday > LowTomorrow ) {
# Add Sell transaction tomorrow at today's low price
addTxn(portfolioname, Symbol=instrument, TxnDate = time(symbol[i+1]), TxnPrice=LowToday, TxnQty = -Position, TxnFees = transactionCost)
}
}
} else {
# Check Rule 4
if (i==nrow(symbol)-1) {
# Add Sell transaction for the last day at the close price
addTxn(portfolioname,Symbol=instrument, TxnDate = time(symbol[i+1]), TxnPrice=as.numeric(symbol[i, "Close"]), TxnQty = -Position, TxnFees = transactionCost)
}
}
}
}
}
updatePortf(portfolioname,Symbols=instrument,Dates=CurrentDate)
updateAcct(accountname,Dates=CurrentDate)
updateEndEq(accountname,CurrentDate)
} # End Bar-by-bar processing
myTheme <- chart_theme()
myTheme$col$up.col <- 'lightblue'
myTheme$col$dn.col <- 'brown'
myTheme$col$dn.border <- 'lightgray'
myTheme$col$up.border <- 'lightgray'
par(mfrow=c(1,1))
addEMAString <- paste("add_EMA(n=",emaPeriod,")",sep = "")
chart.Posn(portfolioname,Symbol=instrument,type='candlesticks', theme=myTheme,subset="2005-09::2006-08",TA=addEMAString)
#### Smash Day Pattern WITH SELL ON SMASH DAY and sell when price falls below EMA200 and sell after maxholding period
# Clear Environment -------------------------------------------------------
rm(list=ls())
# Initialization ----------------------------------------------------------
library(blotter)
library(INFT361Course)
# Variables ---------------------------------------------------------------
# Set values:
startCapital <- 1e+6
transactionCost <- -20
daterange <- '2005::2007'
emaPeriod <- 200
maxHoldingPeriod <- 30
InstrumentDirectory <- "~/Desktop/R/DownloadedData/"
instrument <- "SAP.csv"
BuyHoldDirectory <- InstrumentDirectory
BuyHoldInstrument <- instrument
currency("EUR")
Sys.setenv(TZ="UTC")
initdate <- '1999-12-31'
startdate <- '2000-01-01'
enddate <- '2018-12-31'
portfolioname <- "Smash Day"
accountname <- portfolioname
# Clear portfolio and Account
suppressWarnings(rm("account.Smash Day","portfolio.Smash Day","account.buyhold","portfolio.buyhold",pos=.blotter))
# Initialize Portfolio and Account
initPortf(portfolioname,instrument,initDate=initdate,currency="EUR")
initAcct(accountname,portfolios=portfolioname,initDate=initdate,initEq=startCapital,currency="EUR")
# Bar-by-bar processing ---------------------------------------------------
LoadCourseFile(InstrumentDirectory, instrument, debugme = TRUE, dates = daterange)
# Initialize the instrument
stock(instrument, currency = "EUR")
# Load the XTS file
symbol <- get(instrument)
# Calculate the Exponential Moving Average
ema <- EMA(symbol$Close, n=emaPeriod)
# Merge the xts file with the Exponential Moving Average
symbol <- merge(symbol,ema)
# Bar by bar for all bars from one after the ema-period
for (i in (emaPeriod+1):(nrow(symbol)-1)) {
# Dates
CurrentDate <- time(symbol[i])
TomorrowDate <- time(symbol[i+1])
# Today's variables
CloseToday <- as.numeric(symbol[i,"Close"])
EMA_today <- as.numeric(symbol[i,"EMA"])
LowToday <- as.numeric(symbol[i, "Low"])
HighToday <- as.numeric(symbol[i, "High"])
OpenToday <- as.numeric(symbol[i, "Open"])
# Yesterday's variables
LowYesterday <- as.numeric(symbol[i-1, "Low"])
HighYesterday <- as.numeric(symbol[i-1, "High"])
OpenYesterday <- as.numeric(symbol[i-1, "Open"])
CloseYesterday <- as.numeric(symbol[i-1, "Close"])
# Tomorrow's variables
OpenTomorrow <- as.numeric(symbol[i+1, "Open"])
LowTomorrow <- as.numeric(symbol[i+1, "Low"])
HighTomorrow <- as.numeric(symbol[i+1, "High"])
# Config
Equity <- getEndEq(accountname, CurrentDate)
Position <- getPosQty(portfolioname, Symbol = instrument, Date = CurrentDate)
# Log
print(sprintf("%s - Equity: %s", CurrentDate, Equity))
# Check whether we have a position
if (Position == 0) {
# Start checking BUY rules
# Check whether we have a Smash Day (Long).
# Smash Day (Long) is when Todays Close is below Yesterdays Low.
if ((CloseToday < LowYesterday) & (OpenToday>CloseToday) & (OpenYesterday>CloseYesterday) ) {
#Check whether todays close is above today's EMA
if (CloseToday > EMA_today) {
# BUY RULE: If today was a smash day place a STOP BUY order at todays high price. (Buy tomorrow for 'price >= todays high')
# Simulate STOP BUY order:
# Option 1 to check: Check whether the open price tomorrow is above today's high and add the transaction tomorrow at tomorrows open price.
# Option 2 to check: Check whether today's high was lower than tomorrows high and add the transaction tomorrow at today's high price.
# Check Option 1
if (OpenTomorrow > HighToday) {
# Don't trade at the day before the last day
if(CurrentDate != time(symbol[nrow(symbol)-1])){
# Calculate the buy quantity
BuyQuantity <- as.numeric(trunc(Equity/OpenTomorrow))
# Add transaction
addTxn(portfolioname, Symbol=instrument, TxnDate = TomorrowDate , TxnPrice=OpenTomorrow, TxnQty = BuyQuantity, TxnFees = transactionCost)
# Store the bar at which we placed the transaction
BuyBar <- i
}
} else {
# Check Option 2
if (HighToday < HighTomorrow) {
# Don't trade at the day before the last day
if(CurrentDate != time(symbol[nrow(symbol)-1])){
# Calculate the buy quantity
BuyQuantity <- as.numeric(trunc(Equity/HighToday))
# Add transaction
addTxn(portfolioname, Symbol=instrument, TxnDate = TomorrowDate , TxnPrice=HighToday, TxnQty = BuyQuantity, TxnFees = transactionCost)
# Store the bar at which we placed the transaction
BuyBar <- i
}
}
}
}
}
} else {
# We already have a position
# Check the sell rules in the following order and sell at the first condition which is satisfied.
# Sell rules:
# Rule 1: Sell if we hold the position longer than the specified maximum holding period
# Rule 2: Sell at tomorrow's opening price if the close price today falls below the EMA
# Rule 3: Sell if we meet the Smash Day (Short) requirements. Today's close must be higher than yesterday's high
# Rule 4: If no sell rule can be applied and we reach the second last day. Sell at the last day.
# Check Rule 1:
if  ((i - BuyBar) > maxHoldingPeriod) {
# Place the sell transaction at todays close price
addTxn(portfolioname, Symbol=instrument, TxnDate = CurrentDate, TxnPrice=as.numeric(symbol[i, "Close"]), TxnQty = -Position, TxnFees = transactionCost)
} else {
# Check Rule 2:
if (as.numeric(symbol[i,"Close"]) < EMA_today) {
# Place the sell transaction at tomorrow's open price
addTxn(portfolioname, Symbol=instrument, TxnDate = time(symbol[i+1]), TxnPrice=OpenTomorrow, TxnQty = -Position, TxnFees = transactionCost)
} else {
# Check Rule 3:
# Sell Rule 3: If today was a smash day (short) place an order at todays low price. (Buy tomorrow for 'price <= todays low')
# Simulate this behaviour:
# Option 1 to check: Check whether the open price tomorrow is below today's low and add the transaction tomorrow at tomorrows open price.
# Option 2 to check: Check whether today's low was larger than tomorrow's low and add the transaction tomorrow at today's low price.
# Check for Smash Day (Short)
if ((CloseToday > HighYesterday)&(OpenToday<CloseToday) & (OpenYesterday<CloseYesterday) ) {
# Check for Option 1
if (OpenTomorrow < LowToday) {
# Add Sell transaction tomorrow at tomorrow's open price
addTxn(portfolioname, Symbol=instrument, TxnDate = time(symbol[i+1]), TxnPrice=OpenTomorrow, TxnQty = -Position, TxnFees = transactionCost)
} else {
# Check for Option 2
if (LowToday > LowTomorrow ) {
# Add Sell transaction tomorrow at today's low price
addTxn(portfolioname, Symbol=instrument, TxnDate = time(symbol[i+1]), TxnPrice=LowToday, TxnQty = -Position, TxnFees = transactionCost)
}
}
} else {
# Check Rule 4
if (i==nrow(symbol)-1) {
# Add Sell transaction for the last day at the close price
addTxn(portfolioname,Symbol=instrument, TxnDate = time(symbol[i+1]), TxnPrice=as.numeric(symbol[i, "Close"]), TxnQty = -Position, TxnFees = transactionCost)
}
}
}
}
}
updatePortf(portfolioname,Symbols=instrument,Dates=CurrentDate)
updateAcct(accountname,Dates=CurrentDate)
updateEndEq(accountname,CurrentDate)
} # End Bar-by-bar processing
myTheme <- chart_theme()
myTheme$col$up.col <- 'lightblue'
myTheme$col$dn.col <- 'brown'
myTheme$col$dn.border <- 'lightgray'
myTheme$col$up.border <- 'lightgray'
par(mfrow=c(1,1))
addEMAString <- paste("add_EMA(n=",emaPeriod,")",sep = "")
chart.Posn(portfolioname,Symbol=instrument,type='candlesticks', theme=myTheme,subset="2005-09::2006-08",TA=addEMAString)
Return.portfolio(rets)
head(rets)
library(PerformanceAnalytics) # contains lots of methods to investigate performance
# obtain the portfolio returns - with these you can compute virtually any financial metrics you wish
rets <- PortfReturns(Account=accountname)
rownames(rets) <- NULL # this step is important!
charts.PerformanceSummary(rets,colorset=rainbow12equal,main=instrumentlist)
head(rets)
# We remove any objects, in case there was a buyhold portfolio initialized before
suppressWarnings(try(rm(list=c("account.buyhold","portfolio.buyhold"),pos=.blotter)))
# The Buy and hold symbol is loaded
LoadCourseFile(BuyHoldDirectory,BuyHoldInstrument,debugme=TRUE,dates=daterange)
# The Buy and hold instrument is initialized
stock(BuyHoldInstrument,currency="EUR")
BuyHoldSymbol<-get(BuyHoldInstrument)
# The portfolio and account "buyhold" is initialized
initPortf("buyhold",BuyHoldInstrument,initDate=initdate,currency="EUR")
initAcct("buyhold",portfolios="buyhold",initDate=initdate,initEq=startCapital,currency="EUR")
# The first date of the defined daterange is selected
currentdate <- first(time(BuyHoldSymbol))
# The close price at this date is selected
closeprice <- as.numeric(Cl(BuyHoldSymbol[currentdate,]))
# Calculate the unitsize we can buy with our startingcapital
unitsize <- as.numeric(trunc(startCapital/closeprice))
# Place the transaction for the instrument at the first date
addTxn("buyhold",Symbol=BuyHoldInstrument,TxnDate=currentdate,TxnPrice=closeprice,TxnQty=unitsize,TxnFees=transactionCost)
# Select the last date of the daterange period
lastdate <-last(time(BuyHoldSymbol))
# Select the price at the last date
lastprice <- as.numeric(Cl(BuyHoldSymbol[lastdate,]))
# Sell the position at the last date of the daterange
addTxn("buyhold",Symbol=BuyHoldInstrument,TxnDate=lastdate,TxnPrice=lastprice,TxnQty=-unitsize,TxnFees=transactionCost)
# update portfolio and account
updatePortf(Portfolio="buyhold")
updateAcct(name="buyhold")
updateEndEq(Account="buyhold")
chart.Posn("buyhold",Symbol=BuyHoldInstrument, theme=myTheme)
rets.bh <- PortfReturns(Account='buyhold')
returns <- cbind(rets,rets.bh)
returns
Return.portfolio(returns)
head(Returns.portfolio(returns))
head(Return.portfolio(returns))
table.Stats(returns)
portRet <- Return.portfolio(returns)
charts.PerformanceSummary(portRet,geometric=FALSE,wealth.index=TRUE)
charts.PerformanceSummary(returns,geometric=FALSE,wealth.index=TRUE)
