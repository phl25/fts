CurrentDate <- time(symbol[i])
TomorrowDate <- time(symbol[i + 1])
# Today's variables
CloseToday <- as.numeric(symbol[i, "Close"])
EMA_today <- as.numeric(symbol[i, "EMA"])
LowToday <- as.numeric(symbol[i, "Low"])
HighToday <- as.numeric(symbol[i, "High"])
# Yesterday's variables
LowYesterday <- as.numeric(symbol[i - 1, "Low"])
HighYesterday <- as.numeric(symbol[i - 1, "High"])
# Tomorrow's variables
OpenTomorrow <- as.numeric(symbol[i + 1, "Open"])
LowTomorrow <- as.numeric(symbol[i + 1, "Low"])
HighTomorrow <- as.numeric(symbol[i + 1, "High"])
# Config
Equity <- getEndEq(accountname, CurrentDate)
Position <-
getPosQty(portfolioname, Symbol = instrument, Date = CurrentDate)
# Check whether we have a position
if (Position == 0) {
# Start checking BUY rules
# Check whether we have a Smash Day (Buy).
# Smash Day (Buy) is when Todays Close is below Yesterdays Low.
if (CloseToday < LowYesterday) {
# Smash Day (Buy)
#Check whether todays close is above today's EMA
if (CloseToday > EMA_today) {
# BUY RULE: If today was a smash day place a STOP BUY order
# at todays high price for the next day.
# (Buy tomorrow for 'price >= todays high')
######
# Simulate STOP BUY order:
######
# Option 1 to check: Check whether the open price tomorrow
# is above today's high and add the transaction tomorrow at
# tomorrow's open price.
# Option 2 to check: Check whether today's high was lower
# than tomorrows high and add the transaction tomorrow
# at today's high price
# Check Option 1
if (OpenTomorrow > HighToday) {
# Don't trade at the day before the last day
if (CurrentDate != time(symbol[nrow(symbol) - 1])) {
# Calculate the buy quantity
BuyQuantity <- as.numeric(trunc(Equity / OpenTomorrow))
# Add transaction
addTxn(
portfolioname,
Symbol = instrument,
TxnDate = TomorrowDate ,
TxnPrice = OpenTomorrow,
TxnQty = BuyQuantity,
TxnFees = transactionCost
)
# Store the bar at which we placed the transaction
BuyBar <- i
}
} else {
# Check Option 2
if (HighToday < HighTomorrow) {
# Don't trade at the day before the last day
if (CurrentDate != time(symbol[nrow(symbol) - 1])) {
# Calculate the buy quantity
BuyQuantity <- as.numeric(trunc(Equity / HighToday))
# Add transaction
addTxn(
portfolioname,
Symbol = instrument,
TxnDate = TomorrowDate ,
TxnPrice = HighToday,
TxnQty = BuyQuantity,
TxnFees = transactionCost
)
# Store the bar at which we placed the transaction
BuyBar <- i
}
}
}
}
}
} else {
# We already have a position
# Check the sell rules in the following order and sell at the
# first condition which is satisfied.
#####
# SELL rules:
#####
# Rule 1: Sell if we hold the position longer than the specified
# maximum holding period
# Rule 2: Sell at tomorrow's opening price if the close price
# today falls below the EMA
# Rule 3: Sell if we meet the Smash Day (Sell) requirements.
# Today's close must be higher than yesterday's high
# Rule 4: If no sell rule can be applied and we reach the
# second last day. Sell at the last day.
# Check Rule 1:
if ((i - BuyBar) > maxHoldingPeriod) {
# Place the sell transaction at todays close price
addTxn(
portfolioname,
Symbol = instrument,
TxnDate = CurrentDate,
TxnPrice = as.numeric(symbol[i, "Close"]),
TxnQty = -Position,
TxnFees = transactionCost
)
} else {
# Check Rule 2:
if (as.numeric(symbol[i, "Close"]) < EMA_today) {
# Place the sell transaction at tomorrow's open price
addTxn(
portfolioname,
Symbol = instrument,
TxnDate = time(symbol[i + 1]),
TxnPrice = OpenTomorrow,
TxnQty = -Position,
TxnFees = transactionCost
)
} else {
# Check Rule 3:
# Sell Rule 3: If today is a Smash Day (Sell) place an order tomorrow at todays
# low price.
# Simulate this behaviour:
# Option 1 to check: Check whether the open price tomorrow is below today's
# low and add the transaction tomorrow at tomorrow's open price.
# Option 2 to check: Check whether today's low was larger than tomorrow's
# low and add the transaction tomorrow at today's low price.
# Check for Smash Day (Sell)
if (CloseToday > HighYesterday) {
# Check for Option 1
if (OpenTomorrow < LowToday) {
# Add Sell transaction tomorrow at tomorrow's open price
addTxn(
portfolioname,
Symbol = instrument,
TxnDate = time(symbol[i + 1]),
TxnPrice = OpenTomorrow,
TxnQty = -Position,
TxnFees = transactionCost
)
} else {
# Check for Option 2
if (LowToday > LowTomorrow) {
# Add Sell transaction tomorrow at today's low price
addTxn(
portfolioname,
Symbol = instrument,
TxnDate = time(symbol[i + 1]),
TxnPrice = LowToday,
TxnQty = -Position,
TxnFees = transactionCost
)
}
}
} else {
# Check Rule 4
if (i == nrow(symbol) - 1) {
# Add Sell transaction for the last day at the close price
addTxn(
portfolioname,
Symbol = instrument,
TxnDate = time(symbol[i + 1]),
TxnPrice = as.numeric(symbol[i, "Close"]),
TxnQty = -Position,
TxnFees = transactionCost
)
}
}
}
}
}
updatePortf(portfolioname, Symbols = instrument, Dates = CurrentDate)
updateAcct(accountname, Dates = CurrentDate)
updateEndEq(accountname, CurrentDate)
} # End Bar-by-bar processing
} # End for loop for multiple instruments
# Loop through all instruments in the instrumentlist
for (instrument in instrumentlist){
rm(daterange_check)
daterange_check <- c()
transactionsInstrument <- getTxns(Portfolio=portfolioname,Symbol=instrument)
# Create a list of transactions to check
for (i in
c(2,6, (nrow(transactionsInstrument)-7),(nrow(transactionsInstrument)-5))) {
from <- as.Date(index(transactionsInstrument[i,1]))-7
to <- as.Date(index(transactionsInstrument[i+1,1]))+7
daterange_check <- c(daterange_check, paste(from, "::", to, sep = ""))
}
# Plot the transactions and check them manually
for (daterange_check_i in daterange_check){
print(chart.Posn(portfolioname,
Symbol=instrument,
type='candlesticks',
theme=myTheme,
subset=daterange_check_i,
TA=addEMAString))
}
}
for (instrument in instrumentlist){
chart <- get(instrument)
print(chart_Series(x=chart,name=instrument,
theme=myTheme,
subset=daterange,
TA="add_TA((chart$EMA), on=1,type='l',col='blue');add_Vo()"))
}
for (instrument in instrumentlist){
chart <- get(instrument)
print(chart_Series(x=chart,name=instrument,
theme=myTheme,
subset=daterange,
TA="add_TA((chart$EMA), on=1,type='l',col='blue')"))
}
# Plot graph with indicators for transaction
for (instrument in instrumentlist){
chart.Posn(portfolioname,
Symbol=instrument,
type='candlesticks',
theme=myTheme,
subset=daterange,
TA=addEMAString)
}
library(PerformanceAnalytics)
# Get returns for the account
rets <- PortfReturns(Account=accountname)
rownames(rets) <- NULL
tstats <- tradeStats(Portfolio=portfolioname, Symbols=instrumentlist)
for (i in 1:nrow(tstats)) {
trades.tab <- cbind(
c("Trades", "Win Percent", "Loss Percent","W/L Ratio"),
c(tstats[i,"Num.Trades"],
round(tstats[i,"Percent.Positive"],2),
round(tstats[i,"Percent.Negative"],2),
round((tstats[i,"Percent.Positive"]/tstats[i,"Percent.Negative"]),2)))
trades1 <- trades.tab
rownames(trades1) <- c("Trades",
"Win Percent",
"Loss Percent",
"W/L Ratio")
trades1 <- trades1[,2]
print(row.names(tstats[i,]))
print(trades1)
writeLines("")
}
head(rets)
tab.perf <- table.Arbitrary(rets, metrics=c("Return.cumulative",
"Return.annualized",
"SharpeRatio.annualized",
"CalmarRatio"),
metricsNames=c("Cumulative Return",
"Annualized Return",
"Annualized Sharp Ratio",
"Calmar Ratio"))
tab.risk <- table.Arbitrary(rets, metrics=c("StdDev.annualized",
"maxDrawdown",
"VaR",
"ES"),
metricsNames=c("Annualized StdDev",
"Max Drawdown",
"Value-at-Risk",
"Conditional VaR"),
method=c("historical"))
colnames(tab.perf) <- substr(colnames(tab.perf),1,3)
colnames(tab.risk) <- substr(colnames(tab.risk),1,3)
writeLines("Performance Metrics")
tab.perf
writeLines("Risk Metrics")
tab.risk
for (i in 1:ncol(rets)){
charts.PerformanceSummary(rets[,i],colorset=rainbow12equal,lwd=1,main=substr(colnames(rets[,i]),1,3))
}
# Any objects, in case there was a buyhold
# portfolio initialized before are removed
suppressWarnings(try(rm(list=c("account.buyhold",
"portfolio.buyhold"),
pos=.blotter)))
# The Buy and hold instrument is loaded
LoadCourseFile(BuyHoldDirectory,BuyHoldInstrument,debugme=TRUE,dates=daterange)
# The Buy and hold instrument is initialized
stock(BuyHoldInstrument,currency="EUR")
BuyHoldSymbol<-get(BuyHoldInstrument)
# The portfolio and account "buyhold" is initialized
initPortf("buyhold",
BuyHoldInstrument,
initDate=initdate,
currency="EUR")
initAcct("buyhold",
portfolios="buyhold",
initDate=initdate,
initEq=startCapital,
currency="EUR")
# The first date of the defined daterange is selected
currentdate <- first(time(BuyHoldSymbol))
# The close price at this date is selected
closeprice <- as.numeric(Cl(BuyHoldSymbol[currentdate,]))
# Calculate the unitsize we can buy with our startingcapital
unitsize <- as.numeric(trunc(startCapital/closeprice))
# Place the transaction for the instrument at the first date
addTxn("buyhold",
Symbol=BuyHoldInstrument,
TxnDate=currentdate,
TxnPrice=closeprice,
TxnQty=unitsize,
TxnFees=transactionCost)
# Select the last date of the daterange period
lastdate <-last(time(BuyHoldSymbol))
# Select the price at the last date
lastprice <- as.numeric(Cl(BuyHoldSymbol[lastdate,]))
# Sell the position at the last date of the daterange
addTxn("buyhold",
Symbol=BuyHoldInstrument,
TxnDate=lastdate,
TxnPrice=lastprice,
TxnQty=-unitsize,
TxnFees=transactionCost)
# update portfolio and account
updatePortf(Portfolio="buyhold")
updateAcct(name="buyhold")
updateEndEq(Account="buyhold")
chart.Posn("buyhold",Symbol=BuyHoldInstrument, theme=myTheme)
rets.bh <- PortfReturns(Account='buyhold')
returns <- cbind(rets,rets.bh)
colnames(returns) <- substr(colnames(returns),1,3)
head(returns)
table.Stats(returns)
table.AnnualizedReturns(returns)
# charts.PerformanceSummary(returns,geometric=FALSE,wealth.index=TRUE)
chart.RiskReturnScatter(returns,Rf=0,
add.sharpe=c(1,2),
xlim=c(0,0.25),
main="Return versus Risk",
)
chart.RelativePerformance(returns[,1],returns[,2],
colorset=c("red","blue"),
lwd=2,
legend.loc="topleft")
for (i in colnames(returns)){print(i)}
for (i in colnames(returns[,[-"DAX"]])){print(i)}
for (i in colnames(returns[,-"DAX"])){print(i)}
for (i in colnames(returns[,-which(names(returns) == "DAX")])){print(i)}
table.Stats(returns)
table.AnnualizedReturns(returns)
# charts.PerformanceSummary(returns,geometric=FALSE,wealth.index=TRUE)
chart.RiskReturnScatter(returns,Rf=0,
add.sharpe=c(1,2),
xlim=c(0,0.25),
main="Return versus Risk"
)
for (i in colnames(returns[,-which(names(returns) == "DAX")])){
chart.RelativePerformance(returns[,"i"],returns[,"DAX"],
colorset=c("red","blue"),
lwd=2,
legend.loc="topleft")
}
colnames(returns[,-which(names(returns) == "DAX")])
head(returns[,"DBK"])
table.Stats(returns)
table.AnnualizedReturns(returns)
# charts.PerformanceSummary(returns,geometric=FALSE,wealth.index=TRUE)
chart.RiskReturnScatter(returns,Rf=0,
add.sharpe=c(1,2),
xlim=c(0,0.25),
main="Return versus Risk"
)
for (i in colnames(returns[,-which(names(returns) == "DAX")])){
print(chart.RelativePerformance(returns[,"i"],returns[,"DAX"],
colorset=c("red","blue"),
lwd=2,
legend.loc="topleft"))
}
for (i in colnames(returns[,-which(names(returns) == "DAX")])){
print(chart.RelativePerformance(returns[,"i"],returns[,"DAX"],
colorset=c("red","blue"),
lwd=2,
legend.loc="topleft"))
}
for (i in colnames(returns[,-which(names(returns) == "DAX")])){
print(i)
}
table.Stats(returns)
table.AnnualizedReturns(returns)
# charts.PerformanceSummary(returns,geometric=FALSE,wealth.index=TRUE)
chart.RiskReturnScatter(returns,Rf=0,
add.sharpe=c(1,2),
xlim=c(0,0.25),
main="Return versus Risk"
)
for (i in colnames(returns[,-which(names(returns) == "DAX")])){
print(chart.RelativePerformance(returns[,i],returns[,"DAX"],
colorset=c("red","blue"),
lwd=2,
legend.loc="topleft"))
}
table.Stats(returns)
table.AnnualizedReturns(returns)
# charts.PerformanceSummary(returns,geometric=FALSE,wealth.index=TRUE)
chart.RiskReturnScatter(returns,Rf=0,
add.sharpe=c(1,2),
xlim=c(0,0.25),
main="Return versus Risk"
)
for (i in colnames(returns[,-which(names(returns) == "DAX")])){
print(chart.RelativePerformance(returns[,i],returns[,"DAX"],
colorset=c("red","blue"),
lwd=1,
legend.loc="topleft"))
}
set.seed(123)
somerandoms <- rnorm(length(discreteR),mean=mean(discreteR),sd=sd(discreteR))
# make them into an "index-matching" time series - just for plotting
somerandomsts <- xts(somerandoms,index(discreteR))
par(mfrow=c(2,1))
plot(discreteR)
plot(somerandomsts)
for (i in 1:length(instrumentlist)){
# Plot the Returns of each instrument
print(plot(rets[,i], lwd = 1, main = paste("Returns of ", substr(colnames(rets[,i]),1,3), sep="")))
equityCurve <- cumprod(1 + rets[,i])
# Plot the equity curve of each instrument
print(plot(equityCurve, lwd = 1, main = paste("Equity curve of ", substr(colnames(rets[,i]),1,3), sep="")))
# Plot the Histogram of the returns to see the return distribution and compare with a random distribution.
set.seed(123)
random_dist <- rnorm(length(rets[,i]),mean=mean(rets[,i]),sd=sd(rets[,i]))
# make them into an "index-matching" time series - just for plotting
random_dist_stats <- xts(random_dist,index(rets))
random_dist_stats_density <- density(random_dist_stats)
hist(rets[,i],probability=TRUE,breaks=100,main=paste("Histogram of Simple Returns of ",substr(colnames(rets[,i]),1,3), sep = ""))
points(random_dist_stats_density,type="l")
#print(hist(rets[,i],main=paste("Histogram of Simple Returns of ",substr(colnames(rets[,i]),1,3),sep=""),breaks=100, ylim = c(0,100)))
}
for (i in 1:length(instrumentlist)){
# Plot the Returns of each instrument
print(plot(rets[,i], lwd = 1, main = paste("Returns of ", substr(colnames(rets[,i]),1,3), sep="")))
equityCurve <- cumprod(1 + rets[,i])
# Plot the equity curve of each instrument
print(plot(equityCurve, lwd = 1, main = paste("Equity curve of ", substr(colnames(rets[,i]),1,3), sep="")))
# Plot the Histogram of the returns to see the return distribution and compare with a random distribution.
set.seed(123)
random_dist <- rnorm(length(rets[,i]),mean=mean(rets[,i]),sd=sd(rets[,i]))
# make them into an "index-matching" time series - just for plotting
random_dist_stats <- xts(random_dist,index(rets))
random_dist_stats_density <- density(random_dist_stats)
hist(rets[,i],probability=TRUE,breaks=100,main=paste("Histogram of Simple Returns of ",substr(colnames(rets[,i]),1,3), sep = ""), ylim = c(0,100))
points(random_dist_stats_density,type="l")
#print(hist(rets[,i],main=paste("Histogram of Simple Returns of ",substr(colnames(rets[,i]),1,3),sep=""),breaks=100, ylim = c(0,100)))
}
quantile(rets[,1])
discreteRQ <- quantile(rets[,i],probs=probs)
discreteRQ <- quantile(rets[,1],probs=probs)
probs <- 0.05
discreteRQ <- quantile(rets[,1],probs=probs)
(discreteRQ <- quantile(rets[,1],probs=probs))
probs <- 0.01
quantile(rets[,i])
discreteRQ <- quantile(rets[,i],probs=probs)
(discreteRQ <- quantile(rets[,i],probs=probs))
probs <- 0.05
(discreteRQ <- quantile(rets[,i],probs=probs))
Investment <- 10000
probs <- 0.01
for (i in 1:length(instrumentlist)) {
quantile(rets[,i])
(discreteRQ <- quantile(rets[,i],probs=probs))
loss <- Investment * discreteRQ
print(sprintf("Given a %s investment in %s, with a probability of %s, we would expect a maximum loss of %s per day.", Investment, substr(colnames(rets[,i]),1,3), (1-probs)))
print(round(loss,2))
}
Investment <- 10000
probs <- 0.01
for (i in 1:length(instrumentlist)) {
quantile(rets[,i])
(discreteRQ <- quantile(rets[,i],probs=probs))
loss <- Investment * discreteRQ
print(sprintf("Given a %s investment in %s, with a probability of %s, we would expect a maximum loss of %s per day.", Investment, substr(colnames(rets[,i]),1,3), (1-probs), round(loss,2)))
}
Investment <- 10000
probs <- 0.01
for (i in 1:length(instrumentlist)) {
quantile(rets[,i])
(discreteRQ <- quantile(rets[,i],probs=probs))
loss <- Investment * discreteRQ
print(sprintf("Given a %s investment in %s, with a probability of %s, we would expect a maximum loss of %s per day.", Investment, substr(colnames(rets[,i]),1,3), (1-probs), round(loss,2)*-1))
}
Investment <- 10000
probs <- 0.01
print(sprintf("Investment: %s", Investment))
writeLines("")
print(sprintf("Confidence Level: %s", (1-probs)))
writeLines()
Investment <- 10000
probs <- 0.01
print(sprintf("Investment: %s", Investment))
writeLines("")
print(sprintf("Confidence Level: %s", (1-probs)))
writeLines("")
for (i in 1:length(instrumentlist)) {
quantile(rets[,i])
(discreteRQ <- quantile(rets[,i],probs=probs))
loss <- Investment * discreteRQ
print(sprintf("Given a %s investment in %swe would expect a maximum loss of %s per day.", Investment, substr(colnames(rets[,i]),1,3), (1-probs), round(loss,2)*-1))
}
Investment <- 10000
probs <- 0.01
print(sprintf("Investment: %s", Investment))
writeLines("")
print(sprintf("Confidence Level: %s", (1-probs)))
writeLines("")
for (i in 1:length(instrumentlist)) {
quantile(rets[,i])
(discreteRQ <- quantile(rets[,i],probs=probs))
loss <- Investment * discreteRQ
print(sprintf("Given a %s investment in %s we would expect a maximum loss of %s per day.", Investment, substr(colnames(rets[,i]),1,3), round(loss,2)*-1))
}
